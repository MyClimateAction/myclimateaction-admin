{"version":3,"sources":["Components/AuthToken.js","Components/TopBar.js","Components/Table/Row.js","Components/Table/Table.js","App.js","serviceWorker.js","index.js"],"names":["AuthToken","state","tokenString","onTypeChange","e","setState","target","value","handleSubmit","preventDefault","props","onAccess","onSubmit","this","onChange","type","placeholder","id","Component","TopBar","className","onClick","logout","Row","key","style","rowTd","name","freq","image","votes","action","Table","returnTableData","actions","results","data","length","map","title","frequency","picture_url","App","checkAuth","token","isValid","auth","fetchData","fetch","process","REACT_APP_API_URL","then","response","json","responseData","loading","catch","error","console","log","handleLogout","prevState","handleModifyAction","handleAddAction","imageURL","createActionObject","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.877a051b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nexport default class AuthToken extends Component {\n  state = {\n    tokenString: \"\"\n  };\n\n  onTypeChange = e => {\n    this.setState({ tokenString: e.target.value });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.onAccess(this.state.tokenString);\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label>My climate action admin</label>\n        <input\n          onChange={this.onTypeChange}\n          type=\"password\"\n          placeholder=\"Enter auth token\"\n        />\n        <button type=\"submit\" id=\"submit\">\n          Access\n        </button>\n      </form>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nexport default class TopBar extends Component {\n  render() {\n    return (\n      <header className=\"TopBar-container\">\n        <h2 className=\"TopBar-item\">actions</h2>\n        <h1 className=\"TopBar-item\">MYCLIMATEACTION</h1>\n        <button className=\"TopBar-item\" onClick={this.props.logout}>\n          logout\n        </button>\n      </header>\n    );\n  }\n}\n","import React from \"react\";\nimport style from \"./Row.css\";\n\nconst Row = props => (\n  <tr key={props.id}>\n    <td className={style.rowTd}>{props.name}</td>\n    <td className={style.rowTd}>{props.freq}</td>\n    <td className={style.rowTd}>{props.image}</td>\n    <td className={style.rowTd}>{props.votes}</td>\n    <td>\n      <button>{props.action}</button>\n    </td>\n  </tr>\n);\n\nexport default Row;\n","import React, { Component } from \"react\";\nimport Row from \"./Row\";\n\nexport default class Table extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      actions: []\n    };\n  }\n\n  returnTableData = () => {\n    const results = this.props.data;\n    let actions;\n    if (results.length) {\n      actions = results.map(action => (\n        <Row\n          key={action.id}\n          id={action.id}\n          name={action.title}\n          freq={action.frequency}\n          image={action.picture_url}\n          votes={10}\n          action={\"Edit\"}\n        />\n      ));\n    } else {\n      actions = <p>No data</p>;\n    }\n\n    return (\n      <table className=\"Actions-List\">\n        <thead>\n          <tr className=\"Actions-tr\">\n            <td>Name</td>\n            <td>Frequency</td>\n            <td>Image</td>\n            <td>Votes</td>\n            <td>Action</td>\n          </tr>\n        </thead>\n        <tbody>{actions}</tbody>\n      </table>\n    );\n  };\n\n  render() {\n    return (\n      <div>\n        {this.returnTableData(this.state.actions)}\n        <button>Add an Action</button>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport AuthToken from \"./Components/AuthToken\";\nimport TopBar from \"./Components/TopBar\";\nimport Table from \"./Components/Table/Table\";\n\nexport default class App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      actions: [],\n      loading: false,\n      auth: false\n    };\n  }\n\n  componentDidMount() {\n    if (this.checkAuth()) {\n      this.fetchData();\n    }\n  }\n\n  checkAuth = token => {\n    //!!!!!! change \"token\" with real token\n    let isValid = token === \"MyClimateActionAdmin2019!\" ? true : false;\n    this.setState({ auth: isValid });\n    this.fetchData();\n    // process.env.NODE_ENV development | production\n    // localStorage.set('token', token)\n    // localStorage.getItem('token')\n  };\n\n  fetchData = () => {\n    fetch(\n      `http://${process.env.REACT_APP_API_URL}/actions`\n      //, {\n      // headers: {\n      //   authorization: token\n      // },\n      // method: 'POST',\n      // body: {\n      //   title: \"\", frequency: \"\", picture_url: \"\"\n      // }\n      //}\n    )\n      .then(response => response.json())\n      .then(responseData => {\n        this.setState({\n          actions: responseData.data,\n          loading: false\n        });\n      })\n      .catch(error => {\n        console.log(\"Error fetching and parsing data.\", error);\n      });\n  };\n\n  // ---------------- HANDLE FUNCTIONS ----------------\n  handleLogout = () => {\n    console.log(\"logout\");\n    this.setState(prevState => {\n      return {\n        actions: [],\n        auth: false\n      };\n    });\n  };\n\n  handleModifyAction = id => {\n    this.setState(prevState => {\n      return {\n        //no idea yet to modify\n        actions: prevState\n      };\n    });\n  };\n\n  handleAddAction = (title, imageURL, freq) => {\n    this.setState(prevState => {\n      return {\n        actions: [\n          ...prevState.actions,\n          this.createActionObject(title, imageURL, freq)\n        ]\n      };\n    });\n  };\n\n  createActionObject = (title, imageURL, freq) => {\n    let newAction = {\n      //id: //how to get the id on the server?\n      title: title,\n      picture_url: imageURL,\n      frequency: freq\n      //created_at: how to get the this info server ?\n      //updated_at: how to get the  server ?\n    };\n    return newAction;\n  };\n  // ---------------- END HANDLE FUNCTIONS  ----------------\n\n  // ---------------- RENDER ----------------\n  render() {\n    return (\n      <div className=\"App\">\n        {!this.state.auth && (\n          <div className=\"Content\">\n            {<AuthToken onAccess={this.checkAuth} />}\n          </div>\n        )}\n        {this.state.auth && (\n          <React.Fragment>\n            <TopBar logout={this.handleLogout} />\n            <div className=\"Content\">\n              <h2>Manage actions</h2>\n              {this.state.loading ? (\n                <p>Loading...</p>\n              ) : (\n                <Table data={this.state.actions} />\n              )}\n            </div>\n          </React.Fragment>\n        )}\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}