{"version":3,"sources":["Components/TopBar.js","Components/Table/Row.js","Components/Table/Table.js","App.js","serviceWorker.js","index.js"],"names":["TopBar","className","Row","props","key","id","style","rowTd","name","freq","image","votes","action","Table","returnTableData","actions","results","data","console","log","length","map","title","frequency","picture_url","state","this","Component","App","checkAuth","token","isValid","setState","auth","fetchData","fetch","then","response","json","responseData","loading","catch","error","handleModifyAction","prevState","handleAddAction","imageURL","createActionObject","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.20a799f2.chunk.js","sourcesContent":["import React from \"react\";\n\nconst TopBar = () => {\n  return (\n    <header className=\"TopBar-container\">\n      <h2 className=\"TopBar-item\">actions</h2>\n      <h1 className=\"TopBar-item\">MYCLIMATEACTION</h1>\n      <button className=\"TopBar-item\">logout</button>\n    </header>\n  );\n};\n\nexport default TopBar;\n","import React from \"react\";\nimport style from \"./Row.css\";\n\nconst Row = props => (\n  <tr key={props.id}>\n    <td className={style.rowTd}>{props.name}</td>\n    <td className={style.rowTd}>{props.freq}</td>\n    <td className={style.rowTd}>{props.image}</td>\n    <td className={style.rowTd}>{props.votes}</td>\n    <td>\n      <button>{props.action}</button>\n    </td>\n  </tr>\n);\n\nexport default Row;\n","import React, { Component } from \"react\";\nimport Row from \"./Row\";\n\nexport default class Table extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      actions: [\n        {\n          id: 0,\n          name: \"Vegan\",\n          frequency: \"Daily\", //should be an enum\n          image: \"url\",\n          votes: \"100\",\n          action: \"Edit\" //should be an enum}\n        },\n        {\n          id: 1,\n          name: \"Walk\",\n          frequency: \"Daily\", //should be an enum\n          image: \"url\",\n          votes: \"50\",\n          action: \"Edit\" //should be an enum}\n        }\n      ]\n    };\n  }\n\n  returnTableData = () => {\n    const results = this.props.data;\n    console.log(results);\n    let actions;\n    if (results.length) {\n      actions = results.map(action => (\n        <Row\n          key={action.id}\n          id={action.id}\n          name={action.title}\n          freq={action.frequency}\n          image={action.picture_url}\n          votes={10}\n          action={\"Edit\"}\n        />\n      ));\n    } else {\n      actions = <p>No data</p>;\n    }\n\n    return (\n      <table className=\"Actions-List\">\n        <thead>\n          <tr className=\"Actions-tr\">\n            <td>Name</td>\n            <td>Frequency</td>\n            <td>Image</td>\n            <td>Votes</td>\n            <td>Action</td>\n          </tr>\n        </thead>\n        <tbody>{actions}</tbody>\n      </table>\n    );\n  };\n\n  render() {\n    return (\n      <div>\n        {this.returnTableData(this.state.actions)}\n        <button>Add an Action</button>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n// import AuthToken from \"./Components/AuthToken\";\nimport TopBar from \"./Components/TopBar\";\nimport Table from \"./Components/Table/Table\";\n\nexport default class App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      actions: [],\n      loading: true,\n      auth: false\n    };\n  }\n\n  componentDidMount() {\n    if (this.checkAuth()) {\n      this.fetchData();\n    }\n  }\n\n  checkAuth = token => {\n    //!!!!!! change \"token\" with real token\n    let isValid = token === \"token\" ? true : false;\n    console.log(\"Token: \" + isValid);\n    this.setState({ auth: true }); //to change\n    return true;\n    // process.env.NODE_ENV development | production\n    // localStorage.set('token', token)\n    // localStorage.getItem('token')\n  };\n\n  fetchData = () => {\n    fetch(\"http://51.145.16.252/actions\", {\n      // headers: {\n      //   authorization: token\n      // },\n      // method: 'POST',\n      // body: {\n      //   title: \"\", frequency: \"\", picture_url: \"\"\n      // }\n    })\n      .then(response => response.json())\n      .then(responseData => {\n        this.setState({\n          actions: responseData.data,\n          loading: false\n        });\n      })\n      .catch(error => {\n        console.log(\"Error fetching and parsing data.\", error);\n      });\n  };\n\n  // ---------------- HANDLE FUNCTIONS ----------------\n  handleModifyAction = id => {\n    this.setState(prevState => {\n      return {\n        //no idea yet to modify\n        actions: prevState\n      };\n    });\n  };\n\n  handleAddAction = (title, imageURL, freq) => {\n    this.setState(prevState => {\n      return {\n        actions: [\n          ...prevState.actions,\n          this.createActionObject(title, imageURL, freq)\n        ]\n      };\n    });\n  };\n\n  createActionObject = (title, imageURL, freq) => {\n    let newAction = {\n      //id: //how to get the id on the server?\n      title: title,\n      picture_url: imageURL,\n      frequency: freq\n      //created_at: how to get the this info server ?\n      //updated_at: how to get the  server ?\n    };\n    return newAction;\n  };\n  // ---------------- END HANDLE FUNCTIONS  ----------------\n\n  // ---------------- RENDER ----------------\n  render() {\n    return (\n      <div className=\"App\">\n        {/* <div className=\"Content\">\n          { {<AuthToken onAccess={this.checkAuth} />} }\n        </div> */}\n\n        <TopBar />\n        <div className=\"Content\">\n          <h2>Manage actions</h2>\n          {this.state.loading ? (\n            <p>Loading...</p>\n          ) : (\n            <Table data={this.state.actions} />\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}