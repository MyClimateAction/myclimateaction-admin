{"version":3,"sources":["Components/AuthToken.js","Components/TopBar.js","Components/Table/Row.js","Components/Table/Table.js","App.js","serviceWorker.js","index.js"],"names":["AuthToken","state","tokenString","onTypeChange","e","setState","target","value","handleSubmit","preventDefault","props","onAccess","className","onSubmit","this","onChange","type","placeholder","id","Component","TopBar","onClick","logout","Row","handleEdit","isEdit","handleDone","newName","name","newPicture_url","picture_url","newFrequency","frequency","key","Fragment","votes","Table","returnTableData","actions","results","data","length","map","action","title","App","checkAuth","token","isValid","auth","fetchData","fetch","process","REACT_APP_API_URL","then","response","json","responseData","loading","catch","error","console","log","fetchAuth","handleLogout","handleModifyAction","prevState","handleAddAction","imageURL","freq","createActionObject","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ce1fdcaf.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./AuthToken.css\";\n\nexport default class AuthToken extends Component {\n  state = {\n    tokenString: \"\"\n  };\n\n  onTypeChange = e => {\n    this.setState({ tokenString: e.target.value });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.onAccess(this.state.tokenString);\n  };\n\n  render() {\n    return (\n      <form className=\"Auth-container\" onSubmit={this.handleSubmit}>\n        <label className=\"Auth-item\">My climate action admin</label>\n        <input\n          className=\"Auth-item\"\n          onChange={this.onTypeChange}\n          type=\"password\"\n          placeholder=\"Enter auth token\"\n        />\n        <button className=\"Auth-item\" type=\"submit\" id=\"submit\">\n          Access\n        </button>\n      </form>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./TopBar.css\";\n\nexport default class TopBar extends Component {\n  render() {\n    return (\n      <header className=\"TopBar-container\">\n        <h2 className=\"TopBar-item\">actions</h2>\n        <h1 className=\"TopBar-item\">MYCLIMATEACTION</h1>\n        <button className=\"TopBar-item\" onClick={this.props.logout}>\n          logout\n        </button>\n      </header>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./Row.css\";\n\nexport default class Row extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isEdit: false,\n      name: \"\",\n      picture_url: \"\",\n      frequency: \"\"\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      isEdit: false,\n      name: this.props.name,\n      picture_url: this.props.picture_url,\n      frequency: this.props.frequency\n    });\n  }\n\n  handleEdit = () => {\n    this.setState({\n      isEdit: true\n    });\n  };\n\n  handleDone = e => {\n    const newName = e.target.name;\n    const newPicture_url = e.target.picture_url;\n    const newFrequency = e.target.frequency;\n\n    this.setState({\n      isEdit: false,\n      name: newName,\n      picture_url: newPicture_url,\n      frequency: newFrequency\n    });\n  };\n\n  render() {\n    return (\n      <tr key={this.props.id}>\n        {this.state.isEdit && (\n          <React.Fragment>\n            <td className=\"rowTd\">\n              <input\n                type=\"text\"\n                name=\"name\"\n                value={this.state.name}\n                onChange={this.handleDone}\n              />\n            </td>\n            <td className=\"rowTd\">\n              <input\n                type=\"text\"\n                name=\"frequency\"\n                value={this.state.frequency}\n                onChange={this.handleDone}\n              />\n            </td>\n            <td className=\"rowTd\">\n              <input\n                type=\"text\"\n                name=\"picture_url\"\n                value={this.state.picture_url}\n                onChange={this.handleDone}\n              />\n            </td>\n            <td className=\"rowTd\">{this.props.votes}</td>\n            <td className=\"rowTd\">\n              <button onClick={this.handleDone}>Done</button>\n            </td>\n          </React.Fragment>\n        )}\n\n        {!this.state.isEdit && (\n          <React.Fragment>\n            <td className=\"rowTd\">{this.props.name}</td>\n            <td className=\"rowTd\">{this.props.frequency}</td>\n            <td className=\"rowTd\">{this.props.picture_url}</td>\n            <td className=\"rowTd\">{this.props.votes}</td>\n            <td>\n              <button onClick={this.handleEdit}>Edit</button>\n            </td>\n          </React.Fragment>\n        )}\n      </tr>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport Row from \"./Row\";\nimport \"./Table.css\";\n\nexport default class Table extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      actions: []\n    };\n  }\n\n  returnTableData = () => {\n    const results = this.props.data;\n    let actions;\n    if (results.length) {\n      actions = results.map(action => (\n        <Row\n          key={action.id}\n          id={action.id}\n          name={action.title}\n          frequency={action.frequency}\n          picture_url={action.picture_url}\n          votes={10}\n        />\n      ));\n    } else {\n      actions = <p>No data</p>;\n    }\n\n    return (\n      <table className=\"Actions-List\">\n        <thead>\n          <tr className=\"Actions-tr\">\n            <td>Name</td>\n            <td>Frequency</td>\n            <td>Image</td>\n            <td>Votes</td>\n            <td>Action</td>\n          </tr>\n        </thead>\n        <tbody>{actions}</tbody>\n      </table>\n    );\n  };\n\n  render() {\n    return (\n      <div>\n        {this.returnTableData(this.state.actions)}\n        <button>Add an Action</button>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport AuthToken from \"./Components/AuthToken\";\nimport TopBar from \"./Components/TopBar\";\nimport Table from \"./Components/Table/Table\";\n\nexport default class App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      actions: [],\n      loading: false,\n      auth: false\n    };\n  }\n\n  componentDidMount() {\n    if (this.checkAuth()) {\n      this.fetchData();\n    }\n  }\n\n  checkAuth = token => {\n    let isValid = token === \"MyClimateActionAdmin2019!\" ? true : false;\n    this.setState({ auth: isValid });\n    this.fetchData();\n    // process.env.NODE_ENV development | production\n    // localStorage.set('token', token)\n    // localStorage.getItem('token')\n  };\n\n  fetchData = () => {\n    fetch(\n      `http://${process.env.REACT_APP_API_URL}/actions`\n      //, {\n      // headers: {\n      //   authorization: token\n      // },\n      // method: 'POST',\n      // body: {\n      //   title: \"\", frequency: \"\", picture_url: \"\"\n      // }\n      //}\n    )\n      .then(response => response.json())\n      .then(responseData => {\n        this.setState({\n          actions: responseData.data,\n          loading: false\n        });\n      })\n      .catch(error => {\n        console.log(\"Error fetching and parsing data.\", error);\n      });\n  };\n\n  fetchAuth = () => {\n    fetch(`http://${process.env.REACT_APP_API_URL}/auth`);\n  };\n\n  // ---------------- HANDLE FUNCTIONS ----------------\n  handleLogout = () => {\n    this.setState({\n      actions: [],\n      auth: false\n    });\n  };\n\n  handleModifyAction = id => {\n    this.setState(prevState => {\n      return {\n        //no idea yet to modify\n        actions: prevState\n      };\n    });\n  };\n\n  handleAddAction = (title, imageURL, freq) => {\n    this.setState(prevState => {\n      return {\n        actions: [\n          ...prevState.actions,\n          this.createActionObject(title, imageURL, freq)\n        ]\n      };\n    });\n  };\n\n  createActionObject = (title, imageURL, freq) => {\n    let newAction = {\n      //id: //how to get the id on the server?\n      title: title,\n      picture_url: imageURL,\n      frequency: freq\n      //created_at: how to get the this info server ?\n      //updated_at: how to get the  server ?\n    };\n    return newAction;\n  };\n  // ---------------- END HANDLE FUNCTIONS  ----------------\n\n  // ---------------- RENDER ----------------\n  render() {\n    return (\n      <div className=\"App\">\n        {!this.state.auth && (\n          <div className=\"Content\">\n            {<AuthToken onAccess={this.checkAuth} />}\n          </div>\n        )}\n        {this.state.auth && (\n          <React.Fragment>\n            <TopBar logout={this.handleLogout} />\n            <div className=\"Content\">\n              <h2>Manage actions</h2>\n              {this.state.loading ? (\n                <p>Loading...</p>\n              ) : (\n                <Table data={this.state.actions} />\n              )}\n            </div>\n          </React.Fragment>\n        )}\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}