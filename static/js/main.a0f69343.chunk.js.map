{"version":3,"sources":["Components/AuthToken.js","Components/TopBar.js","Components/Table/Row.js","Components/PopupActions.js","Components/Table/Table.js","App.js","serviceWorker.js","index.js"],"names":["AuthToken","state","tokenString","onTypeChange","e","setState","target","value","handleSubmit","props","onAccess","preventDefault","className","onSubmit","this","onChange","type","placeholder","id","Component","TopBar","onClick","logout","Row","handleEdit","prevState","isEdit","modifyAction","name","picture_url","frequency","data","handleUpdateValue","stateName","adapStringUrl","stringUrl","length","slice","key","Fragment","votes","deleteAction","PopupActions","handleAddAction","addAction","closePopup","required","React","Table","returnTableData","actions","results","map","action","title","togglePopup","showPopup","App","checkAuth","token","fetchAuth","fetch","process","headers","authorization","then","res","ok","undefined","alert","Error","statusText","localStorage","setItem","fetchData","catch","err","message","json","console","log","loading","error","postAction","method","body","JSON","stringify","actionID","handleLogout","removeItem","a","response","handleModifyAction","modifyActions","handleDeleteAction","filter","localStorageToken","getItem","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a0f69343.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./AuthToken.css\";\n\nexport default class AuthToken extends Component {\n  state = {\n    tokenString: \"\"\n  };\n\n  onTypeChange = e => {\n    this.setState({ tokenString: e.target.value });\n  };\n\n  handleSubmit = e => {\n    this.props.onAccess(this.state.tokenString);\n    e.preventDefault();\n  };\n\n  render() {\n    return (\n      <form className=\"Auth-container\" onSubmit={this.handleSubmit}>\n        <label className=\"Auth-item\">My climate action admin</label>\n        <input\n          className=\"Auth-item\"\n          onChange={this.onTypeChange}\n          type=\"password\"\n          placeholder=\"Enter auth token\"\n        />\n        <button className=\"Auth-item\" type=\"submit\" id=\"submit\">\n          Access\n        </button>\n      </form>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./TopBar.css\";\n\nexport default class TopBar extends Component {\n  render() {\n    return (\n      <header className=\"TopBar-container\">\n        <h2 className=\"TopBar-item\">actions</h2>\n        <h1 className=\"TopBar-item\">MYCLIMATEACTION</h1>\n        <button\n          id=\"buttonLogout\"\n          className=\"TopBar-item\"\n          onClick={this.props.logout}\n        >\n          Logout\n        </button>\n      </header>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./Row.css\";\n\nexport default class Row extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isEdit: false,\n      name: \"\",\n      picture_url: \"\",\n      frequency: \"\"\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      isEdit: false,\n      name: this.props.name,\n      picture_url: this.props.picture_url,\n      frequency: this.props.frequency\n    });\n  }\n\n  handleEdit = () => {\n    this.setState(prevState => ({\n      isEdit: !prevState.isEdit\n    }));\n  };\n\n  modifyAction = (id, name, picture_url, frequency) => {\n    let data = {\n      name: name,\n      picture_url: picture_url,\n      frequency: frequency\n    };\n    this.props.modifyAction(id, data);\n    this.handleEdit();\n  };\n\n  handleUpdateValue = e => {\n    const value = e.target.value;\n    const stateName = e.target.name;\n\n    this.setState({\n      [stateName]: value\n    });\n  };\n\n  adapStringUrl = stringUrl => {\n    if (stringUrl.length > 50) {\n      const adapUrlString = `${stringUrl.slice(0, 30)}...${stringUrl.slice(\n        stringUrl.length - 10,\n        stringUrl.length\n      )}`;\n      return adapUrlString;\n    } else {\n      return stringUrl;\n    }\n  };\n\n  render() {\n    return (\n      <tr key={this.props.id}>\n        {this.state.isEdit && (\n          <React.Fragment>\n            <td className=\"rowTd\">\n              <input\n                type=\"text\"\n                name=\"name\"\n                value={this.state.name}\n                onChange={this.handleUpdateValue}\n              />\n            </td>\n            <td className=\"rowTd\">\n              <select\n                name=\"frequency\"\n                value={this.state.frequency}\n                onChange={this.handleUpdateValue}\n              >\n                <option value=\"Daily\">Daily</option>\n                <option value=\"Weekly\">Weekly</option>\n                <option value=\"Monthly\">Monthly</option>\n              </select>\n            </td>\n            <td className=\"rowTd\">\n              <input\n                type=\"text\"\n                name=\"picture_url\"\n                value={this.state.picture_url}\n                onChange={this.handleUpdateValue}\n              />\n            </td>\n            <td className=\"rowTd\">{this.props.votes}</td>\n            <td className=\"rowTd\">\n              <button\n                onClick={() =>\n                  this.modifyAction(\n                    this.props.id,\n                    this.props.name,\n                    this.props.picture_url,\n                    this.props.frequency\n                  )\n                }\n              >\n                Done\n              </button>\n            </td>\n          </React.Fragment>\n        )}\n\n        {!this.state.isEdit && (\n          <React.Fragment>\n            <td className=\"rowTd\">{this.state.name}</td>\n            <td className=\"rowTd\">{this.state.frequency}</td>\n            <td className=\"rowTd\">\n              {this.adapStringUrl(this.state.picture_url)}\n            </td>\n            <td className=\"rowTd\">{this.state.votes}</td>\n            <td className=\"rowTd\">\n              <button id=\"editAction\" onClick={this.handleEdit}>\n                Edit\n              </button>\n            </td>\n            <td className=\"rowTd\">\n              <button\n                id=\"deleteAction\"\n                onClick={() => this.props.deleteAction(this.props.id)}\n              >\n                X\n              </button>\n            </td>\n          </React.Fragment>\n        )}\n      </tr>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./PopupActions.css\";\n\nclass PopupActions extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: \"\",\n      picture_url: \"\",\n      frequency: \"Daily\"\n    };\n  }\n\n  handleUpdateValue = e => {\n    const value = e.target.value;\n    const stateName = e.target.name;\n\n    this.setState({\n      [stateName]: value\n    });\n  };\n\n  handleAddAction = e => {\n    e.preventDefault();\n    this.props.addAction({\n      name: this.state.name,\n      picture_url: this.state.picture_url,\n      frequency: this.state.frequency\n    });\n    this.props.closePopup();\n  };\n\n  render() {\n    return (\n      <div className=\"popup\">\n        <button onClick={this.props.closePopup}>close me</button>\n        <div className=\"popup\\_inner\">\n          <form className=\"\" onSubmit={this.handleAddAction}>\n            <label className=\"\">Add an Action</label>\n            <input\n              className=\"\"\n              name=\"name\"\n              value={this.state.name}\n              onChange={this.handleUpdateValue}\n              type=\"text\"\n              placeholder=\"Enter a name\"\n              required\n            />\n            <select\n              name=\"frequency\"\n              value={this.state.frequency}\n              onChange={this.handleUpdateValue}\n            >\n              <option value=\"Daily\">Daily</option>\n              <option value=\"Weekly\">Weekly</option>\n              <option value=\"Monthly\">Monthly</option>\n              required\n            </select>\n            <input\n              className=\"\"\n              name=\"picture_url\"\n              value={this.state.picture_url}\n              onChange={this.handleUpdateValue}\n              type=\"text\"\n              placeholder=\"Enter an image url\"\n              required\n            />\n            <button className=\"\" type=\"submit\" id=\"submit\">\n              Add action\n            </button>\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default PopupActions;\n","import React, { Component } from \"react\";\nimport Row from \"./Row\";\nimport PopupActions from \"../PopupActions\";\nimport \"./Table.css\";\n\nexport default class Table extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      actions: [],\n      showPopup: false\n    };\n  }\n\n  returnTableData = () => {\n    const results = this.props.data;\n    let actions;\n    if (results.length) {\n      actions = results.map(action => (\n        <Row\n          key={action.id}\n          id={action.id}\n          name={action.title}\n          frequency={action.frequency}\n          picture_url={action.picture_url}\n          votes={10}\n          modifyAction={this.props.modifyAction}\n          deleteAction={this.props.deleteAction}\n        />\n      ));\n    } else {\n      actions = (\n        <tr>\n          <td>No data</td>\n        </tr>\n      );\n    }\n\n    return (\n      <table className=\"Actions-List\">\n        <thead>\n          <tr className=\"Actions-tr\">\n            <td id=\"Name\" className=\"rowTd\">\n              Name\n            </td>\n            <td id=\"Frequency\" className=\"rowTd\">\n              Frequency\n            </td>\n            <td id=\"Image url\" className=\"rowTd\">\n              Image url\n            </td>\n            <td id=\"Votes\" className=\"rowTd\">\n              Votes\n            </td>\n            <td id=\"Edit\" className=\"rowTd\">\n              Edit\n            </td>\n            <td id=\"Delete\" className=\"rowTd\">\n              Delete\n            </td>\n          </tr>\n        </thead>\n        <tbody>{actions}</tbody>\n      </table>\n    );\n  };\n\n  togglePopup = () => {\n    this.setState({\n      showPopup: !this.state.showPopup\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        {this.returnTableData(this.state.actions)}\n        <button id=\"addAction\" onClick={this.togglePopup}>\n          Add an Action\n        </button>\n        {this.state.showPopup && (\n          <PopupActions\n            closePopup={this.togglePopup}\n            addAction={this.props.addAction}\n          />\n        )}\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport AuthToken from \"./Components/AuthToken\";\nimport TopBar from \"./Components/TopBar\";\nimport Table from \"./Components/Table/Table\";\n\nexport default class App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      actions: [],\n      token: undefined,\n      loading: false\n    };\n  }\n\n  checkAuth = token => {\n    this.fetchAuth(token);\n  };\n\n  componentDidMount() {\n    const localStorageToken = localStorage.getItem(\"token\");\n    if (localStorageToken) {\n      this.fetchAuth(localStorageToken);\n    }\n  }\n\n  fetchAuth = token => {\n    return fetch(`${process.env.REACT_APP_API_URL}/auth`, {\n      headers: {\n        authorization: token\n      }\n    })\n      .then(res => {\n        if (res.ok) {\n          this.setState({\n            token\n          });\n          localStorage.setItem(\"token\", token);\n          this.fetchData();\n        } else {\n          this.setState({\n            token: undefined\n          });\n\n          alert(\"Invalid auth token\");\n\n          throw Error(res.statusText);\n        }\n      })\n      .catch(err => {\n        this.setState({\n          token: undefined\n        });\n\n        alert(\"Invalid auth token\");\n\n        throw Error(err.message);\n      });\n  };\n\n  fetchData = () => {\n    fetch(`${process.env.REACT_APP_API_URL}/actions`)\n      .then(res => res.json())\n      .then(res => {\n        console.log(\"fetching\");\n        this.setState({\n          actions: res.data,\n          loading: false\n        });\n      })\n      .catch(error => {\n        console.log(\"Error fetching and parsing data.\", error);\n      });\n  };\n\n  postAction = data => {\n    console.log(\"post Action\");\n    return fetch(`${process.env.REACT_APP_API_URL}/action`, {\n      headers: {\n        \"Content-type\": \"application/json\",\n        authorization: this.state.token\n      },\n      method: \"POST\",\n      body: JSON.stringify({\n        title: data.name,\n        frequency: data.frequency,\n        picture_url: data.picture_url\n      })\n    })\n      .then(res => res.json())\n      .catch(err => {\n        console.error(err);\n      });\n  };\n\n  deleteAction = actionID => {\n    return fetch(`${process.env.REACT_APP_API_URL}/action/${actionID}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-type\": \"application/json\",\n        authorization: this.state.token //from state\n      }\n    })\n      .then(res => {\n        if (res.ok) {\n          console.log(\"DELETE!\");\n        }\n        return res.json();\n      })\n      .catch(err => {\n        console.error(err);\n      });\n  };\n\n  // ---------------- HANDLE FUNCTIONS ----------------\n  handleLogout = () => {\n    localStorage.removeItem(\"token\");\n\n    this.setState({\n      actions: [],\n      token: undefined\n    });\n  };\n\n  handleAddAction = async data => {\n    const response = await this.postAction(data);\n\n    this.setState(prevState => {\n      return {\n        actions: [response.data, ...prevState.actions]\n      };\n    });\n  };\n\n  handleModifyAction = (id, data) => {\n    let modifyActions;\n    this.setState(prevState => {\n      modifyActions = prevState.actions;\n      if (modifyActions.id === id) {\n        modifyActions.name = data.name;\n        modifyActions.picture_url = data.picture_url;\n        modifyActions.frequency = data.frequency;\n      }\n    });\n    return {\n      actions: modifyActions\n    };\n  };\n\n  handleDeleteAction = id => {\n    this.setState(prevState => {\n      return {\n        actions: prevState.actions.filter(a => a.id !== id)\n      };\n    });\n    this.deleteAction(id);\n  };\n\n  // ---------------- END HANDLE FUNCTIONS  ----------------\n\n  // ---------------- RENDER ----------------\n  render() {\n    return (\n      <div className=\"App\">\n        {!this.state.token && (\n          <div className=\"Content\">\n            {<AuthToken onAccess={this.checkAuth} />}\n          </div>\n        )}\n        {this.state.token && (\n          <React.Fragment>\n            <TopBar logout={this.handleLogout} />\n            <div className=\"Content\">\n              <h2>Manage actions</h2>\n              {this.state.loading ? (\n                <p>Loading...</p>\n              ) : (\n                <Table\n                  data={this.state.actions}\n                  addAction={this.handleAddAction}\n                  modifyAction={this.handleModifyAction}\n                  deleteAction={this.handleDeleteAction}\n                />\n              )}\n            </div>\n          </React.Fragment>\n        )}\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}